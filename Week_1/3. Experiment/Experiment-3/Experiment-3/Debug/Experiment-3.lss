
Experiment-3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000009f2  00000a66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012b2  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008db  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000082d  00000000  00000000  00002769  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00002f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000533  00000000  00000000  00003178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c58  00000000  00000000  000036ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00004303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	c4 d0       	rcall	.+392    	; 0x224 <main>
  9c:	a8 c4       	rjmp	.+2384   	; 0x9ee <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <lcd_print_wireframe>:
*/

//<< NOTE >>: You should not change this function in order to get the required output
void lcd_print_wireframe(void)
{	
	lcd_string(1,1,"H:   D:    O:   ");
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	51 e0       	ldi	r21, 0x01	; 1
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	af d1       	rcall	.+862    	; 0x408 <lcd_string>
	lcd_string(2,1,"Binary: ");
  aa:	41 e1       	ldi	r20, 0x11	; 17
  ac:	51 e0       	ldi	r21, 0x01	; 1
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	aa c1       	rjmp	.+852    	; 0x408 <lcd_string>
  b4:	08 95       	ret

000000b6 <lcd_print_binary>:
 * @param[in]  row_num  The row number of the LCD
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_binary(unsigned char row_num, unsigned char col_num, unsigned char num)
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	28 97       	sbiw	r28, 0x08	; 8
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	f8 94       	cli
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	cd bf       	out	0x3d, r28	; 61
  ca:	fe 01       	movw	r30, r28
  cc:	31 96       	adiw	r30, 0x01	; 1
    char buffer[8];
	int k=0;
	for(int c=8;c>=0;c--)
  ce:	28 e0       	ldi	r18, 0x08	; 8
  d0:	30 e0       	ldi	r19, 0x00	; 0
	 {
		 k=num>>(c-1);
		 if(k&1)
  d2:	50 e0       	ldi	r21, 0x00	; 0
		  buffer[8-c] = '1';
		 else
		  buffer[8-c] ='0';
  d4:	70 e3       	ldi	r23, 0x30	; 48
	int k=0;
	for(int c=8;c>=0;c--)
	 {
		 k=num>>(c-1);
		 if(k&1)
		  buffer[8-c] = '1';
  d6:	91 e3       	ldi	r25, 0x31	; 49
{
    char buffer[8];
	int k=0;
	for(int c=8;c>=0;c--)
	 {
		 k=num>>(c-1);
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	31 09       	sbc	r19, r1
		 if(k&1)
  dc:	da 01       	movw	r26, r20
  de:	02 2e       	mov	r0, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <lcd_print_binary+0x30>
  e2:	b5 95       	asr	r27
  e4:	a7 95       	ror	r26
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <lcd_print_binary+0x2c>
  ea:	a0 ff       	sbrs	r26, 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <lcd_print_binary+0x3c>
		  buffer[8-c] = '1';
  ee:	90 83       	st	Z, r25
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <lcd_print_binary+0x3e>
		 else
		  buffer[8-c] ='0';
  f2:	70 83       	st	Z, r23
  f4:	31 96       	adiw	r30, 0x01	; 1
 */
void lcd_print_binary(unsigned char row_num, unsigned char col_num, unsigned char num)
{
    char buffer[8];
	int k=0;
	for(int c=8;c>=0;c--)
  f6:	2f 3f       	cpi	r18, 0xFF	; 255
  f8:	af ef       	ldi	r26, 0xFF	; 255
  fa:	3a 07       	cpc	r19, r26
  fc:	69 f7       	brne	.-38     	; 0xd8 <lcd_print_binary+0x22>
		  buffer[8-c] = '1';
		 else
		  buffer[8-c] ='0';
	 }
	
	lcd_string(row_num,col_num,buffer);
  fe:	ae 01       	movw	r20, r28
 100:	4f 5f       	subi	r20, 0xFF	; 255
 102:	5f 4f       	sbci	r21, 0xFF	; 255
 104:	81 d1       	rcall	.+770    	; 0x408 <lcd_string>
}
 106:	28 96       	adiw	r28, 0x08	; 8
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_print_octal>:
 * @param[in]  row_num  The row number of the LCD
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_octal(unsigned char row_num, unsigned char col_num, unsigned char num)
{
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	00 d0       	rcall	.+0      	; 0x126 <lcd_print_octal+0xe>
 126:	00 d0       	rcall	.+0      	; 0x128 <lcd_print_octal+0x10>
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	f8 2e       	mov	r15, r24
 12e:	e6 2e       	mov	r14, r22
	   char buffer[4];
	   sprintf(buffer,"%.3o",num);
 130:	1f 92       	push	r1
 132:	4f 93       	push	r20
 134:	8a e1       	ldi	r24, 0x1A	; 26
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	9f 93       	push	r25
 13a:	8f 93       	push	r24
 13c:	8e 01       	movw	r16, r28
 13e:	0f 5f       	subi	r16, 0xFF	; 255
 140:	1f 4f       	sbci	r17, 0xFF	; 255
 142:	1f 93       	push	r17
 144:	0f 93       	push	r16
 146:	7b d1       	rcall	.+758    	; 0x43e <sprintf>
	   lcd_string(row_num,col_num,buffer);
 148:	a8 01       	movw	r20, r16
 14a:	6e 2d       	mov	r22, r14
 14c:	8f 2d       	mov	r24, r15
 14e:	5c d1       	rcall	.+696    	; 0x408 <lcd_string>
}
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	08 95       	ret

00000172 <lcd_print_decimal>:
 * @param[in]  row_num  The row number of the LCD
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_decimal(unsigned char row_num, unsigned char col_num, unsigned char num)
{
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	00 d0       	rcall	.+0      	; 0x180 <lcd_print_decimal+0xe>
 180:	00 d0       	rcall	.+0      	; 0x182 <lcd_print_decimal+0x10>
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	f8 2e       	mov	r15, r24
 188:	e6 2e       	mov	r14, r22
      char buffer[4];
      sprintf(buffer,"%.3d",num);
 18a:	1f 92       	push	r1
 18c:	4f 93       	push	r20
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	9f 93       	push	r25
 194:	8f 93       	push	r24
 196:	8e 01       	movw	r16, r28
 198:	0f 5f       	subi	r16, 0xFF	; 255
 19a:	1f 4f       	sbci	r17, 0xFF	; 255
 19c:	1f 93       	push	r17
 19e:	0f 93       	push	r16
 1a0:	4e d1       	rcall	.+668    	; 0x43e <sprintf>
      lcd_string(row_num,col_num,buffer);
 1a2:	a8 01       	movw	r20, r16
 1a4:	6e 2d       	mov	r22, r14
 1a6:	8f 2d       	mov	r24, r15
 1a8:	2f d1       	rcall	.+606    	; 0x408 <lcd_string>
}
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	ff 90       	pop	r15
 1c8:	ef 90       	pop	r14
 1ca:	08 95       	ret

000001cc <lcd_print_hexadecimal>:
 * @param[in]  row_num  The row number of the LCD
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_hexadecimal(unsigned char row_num, unsigned char col_num, unsigned char num)
{
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	00 d0       	rcall	.+0      	; 0x1da <lcd_print_hexadecimal+0xe>
 1da:	1f 92       	push	r1
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	f8 2e       	mov	r15, r24
 1e2:	e6 2e       	mov	r14, r22
		char buffer[3];
		sprintf(buffer,"%.2X",num);
 1e4:	1f 92       	push	r1
 1e6:	4f 93       	push	r20
 1e8:	84 e2       	ldi	r24, 0x24	; 36
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	9f 93       	push	r25
 1ee:	8f 93       	push	r24
 1f0:	8e 01       	movw	r16, r28
 1f2:	0f 5f       	subi	r16, 0xFF	; 255
 1f4:	1f 4f       	sbci	r17, 0xFF	; 255
 1f6:	1f 93       	push	r17
 1f8:	0f 93       	push	r16
 1fa:	21 d1       	rcall	.+578    	; 0x43e <sprintf>
		lcd_string(row_num,col_num,buffer);
 1fc:	a8 01       	movw	r20, r16
 1fe:	6e 2d       	mov	r22, r14
 200:	8f 2d       	mov	r24, r15
 202:	02 d1       	rcall	.+516    	; 0x408 <lcd_string>
}
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	08 95       	ret

00000224 <main>:
 * @return     0
 */
int main(void){
	
	
	lcd_port_config();					// Initialize the LCD port
 224:	1f d0       	rcall	.+62     	; 0x264 <lcd_port_config>
	lcd_init();							// Initialize the LCD
 226:	97 d0       	rcall	.+302    	; 0x356 <lcd_init>
	lcd_clear();						// Clear the LCD
 228:	c3 d0       	rcall	.+390    	; 0x3b0 <lcd_clear>
 22a:	3a df       	rcall	.-396    	; 0xa0 <lcd_print_wireframe>
	lcd_print_wireframe();				// Print wireframe on the LCD
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	4c 2f       	mov	r20, r28
	unsigned char counter = 0;

	//<< TODO >>: FILL THE BLANK FUNCTION PARAMETERS AS PER THE WIREFRAME RULES IN THE FOLLOWING LINES OF CODE
	while(1){
		lcd_print_hexadecimal(1,3,counter );	// Pass the relevant arguments to print hexadecimal characters on the LCD at the place specified by the wireframe
 230:	63 e0       	ldi	r22, 0x03	; 3
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	cb df       	rcall	.-106    	; 0x1cc <lcd_print_hexadecimal>
 236:	4c 2f       	mov	r20, r28
		lcd_print_decimal(1,8,counter);		// Pass the relevant arguments to print decimal characters on the LCD at the place specified by the wireframe
 238:	68 e0       	ldi	r22, 0x08	; 8
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	9a df       	rcall	.-204    	; 0x172 <lcd_print_decimal>
 23e:	4c 2f       	mov	r20, r28
		lcd_print_octal(1,14,counter );			// Pass the relevant arguments to print octal characters on the LCD at the place specified by the wireframe
 240:	6e e0       	ldi	r22, 0x0E	; 14
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	69 df       	rcall	.-302    	; 0x118 <lcd_print_octal>
 246:	4c 2f       	mov	r20, r28
		lcd_print_binary( 2,9,counter );		// Pass the relevant arguments to print binary characters on the LCD at the place specified by the wireframe
 248:	69 e0       	ldi	r22, 0x09	; 9
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	34 df       	rcall	.-408    	; 0xb6 <lcd_print_binary>
 24e:	cf 5f       	subi	r28, 0xFF	; 255
 250:	2f ef       	ldi	r18, 0xFF	; 255
		counter++;	// Increment the counter
 252:	89 e6       	ldi	r24, 0x69	; 105
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	98 e1       	ldi	r25, 0x18	; 24
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x32>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x3c>
 260:	00 00       	nop
 262:	e5 cf       	rjmp	.-54     	; 0x22e <main+0xa>

00000264 <lcd_port_config>:
 264:	84 b1       	in	r24, 0x04	; 4
 266:	87 60       	ori	r24, 0x07	; 7
 * Logic: Passes 0x80 command to LCD using lcd_wr_command
 * Example Call: lcd_home();
 */
void lcd_home (void)
{
	lcd_wr_command(0x80);								// LCD cursor set to Home position
 268:	84 b9       	out	0x04, r24	; 4
 26a:	8a b1       	in	r24, 0x0a	; 10
 26c:	80 6f       	ori	r24, 0xF0	; 240
 26e:	8a b9       	out	0x0a, r24	; 10
 270:	85 b1       	in	r24, 0x05	; 5
 272:	88 7f       	andi	r24, 0xF8	; 248
 274:	85 b9       	out	0x05, r24	; 5
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	8f 70       	andi	r24, 0x0F	; 15
 27a:	8b b9       	out	0x0b, r24	; 11
 27c:	08 95       	ret

0000027e <lcd_set_4bit>:
 27e:	8f e9       	ldi	r24, 0x9F	; 159
 280:	9f e0       	ldi	r25, 0x0F	; 15
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_set_4bit+0x4>
 286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_set_4bit+0xa>
 288:	00 00       	nop
 28a:	28 98       	cbi	0x05, 0	; 5
 28c:	2a 98       	cbi	0x05, 2	; 5
 28e:	80 e3       	ldi	r24, 0x30	; 48
 290:	8b b9       	out	0x0b, r24	; 11
 292:	29 9a       	sbi	0x05, 1	; 5
 294:	ef e1       	ldi	r30, 0x1F	; 31
 296:	fe e4       	ldi	r31, 0x4E	; 78
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <lcd_set_4bit+0x1a>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <lcd_set_4bit+0x20>
 29e:	00 00       	nop
 2a0:	29 98       	cbi	0x05, 1	; 5
 2a2:	ef e9       	ldi	r30, 0x9F	; 159
 2a4:	ff e0       	ldi	r31, 0x0F	; 15
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_set_4bit+0x28>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <lcd_set_4bit+0x2e>
 2ac:	00 00       	nop
 2ae:	28 98       	cbi	0x05, 0	; 5
 2b0:	2a 98       	cbi	0x05, 2	; 5
 2b2:	8b b9       	out	0x0b, r24	; 11
 2b4:	29 9a       	sbi	0x05, 1	; 5
 2b6:	ef e1       	ldi	r30, 0x1F	; 31
 2b8:	fe e4       	ldi	r31, 0x4E	; 78
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_set_4bit+0x3c>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_set_4bit+0x42>
 2c0:	00 00       	nop
 2c2:	29 98       	cbi	0x05, 1	; 5
 2c4:	ef e9       	ldi	r30, 0x9F	; 159
 2c6:	ff e0       	ldi	r31, 0x0F	; 15
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <lcd_set_4bit+0x4a>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <lcd_set_4bit+0x50>
 2ce:	00 00       	nop
 2d0:	28 98       	cbi	0x05, 0	; 5
 2d2:	2a 98       	cbi	0x05, 2	; 5
 2d4:	8b b9       	out	0x0b, r24	; 11
 2d6:	29 9a       	sbi	0x05, 1	; 5
 2d8:	8f e1       	ldi	r24, 0x1F	; 31
 2da:	9e e4       	ldi	r25, 0x4E	; 78
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_set_4bit+0x5e>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_set_4bit+0x64>
 2e2:	00 00       	nop
 2e4:	29 98       	cbi	0x05, 1	; 5
 2e6:	ef e9       	ldi	r30, 0x9F	; 159
 2e8:	ff e0       	ldi	r31, 0x0F	; 15
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_set_4bit+0x6c>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <lcd_set_4bit+0x72>
 2f0:	00 00       	nop
 2f2:	28 98       	cbi	0x05, 0	; 5
 2f4:	2a 98       	cbi	0x05, 2	; 5
 2f6:	80 e2       	ldi	r24, 0x20	; 32
 2f8:	8b b9       	out	0x0b, r24	; 11
 2fa:	29 9a       	sbi	0x05, 1	; 5
 2fc:	8f e1       	ldi	r24, 0x1F	; 31
 2fe:	9e e4       	ldi	r25, 0x4E	; 78
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <lcd_set_4bit+0x82>
 304:	00 c0       	rjmp	.+0      	; 0x306 <lcd_set_4bit+0x88>
 306:	00 00       	nop
 308:	29 98       	cbi	0x05, 1	; 5
 30a:	08 95       	ret

0000030c <lcd_wr_command>:
 30c:	9b b1       	in	r25, 0x0b	; 11
 30e:	9f 70       	andi	r25, 0x0F	; 15
 310:	9b b9       	out	0x0b, r25	; 11
 312:	9b b1       	in	r25, 0x0b	; 11
 314:	28 2f       	mov	r18, r24
 316:	20 7f       	andi	r18, 0xF0	; 240
 318:	92 2b       	or	r25, r18
 31a:	9b b9       	out	0x0b, r25	; 11
 31c:	28 98       	cbi	0x05, 0	; 5
 31e:	2a 98       	cbi	0x05, 2	; 5
 320:	29 9a       	sbi	0x05, 1	; 5
 322:	ef e1       	ldi	r30, 0x1F	; 31
 324:	fe e4       	ldi	r31, 0x4E	; 78
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <lcd_wr_command+0x1a>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd_wr_command+0x20>
 32c:	00 00       	nop
 32e:	29 98       	cbi	0x05, 1	; 5
 330:	9b b1       	in	r25, 0x0b	; 11
 332:	9f 70       	andi	r25, 0x0F	; 15
 334:	9b b9       	out	0x0b, r25	; 11
 336:	9b b1       	in	r25, 0x0b	; 11
 338:	82 95       	swap	r24
 33a:	80 7f       	andi	r24, 0xF0	; 240
 33c:	89 2b       	or	r24, r25
 33e:	8b b9       	out	0x0b, r24	; 11
 340:	28 98       	cbi	0x05, 0	; 5
 342:	2a 98       	cbi	0x05, 2	; 5
 344:	29 9a       	sbi	0x05, 1	; 5
 346:	8f e1       	ldi	r24, 0x1F	; 31
 348:	9e e4       	ldi	r25, 0x4E	; 78
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <lcd_wr_command+0x3e>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <lcd_wr_command+0x44>
 350:	00 00       	nop
 352:	29 98       	cbi	0x05, 1	; 5
 354:	08 95       	ret

00000356 <lcd_init>:
 356:	93 df       	rcall	.-218    	; 0x27e <lcd_set_4bit>
 358:	8f e9       	ldi	r24, 0x9F	; 159
 35a:	9f e0       	ldi	r25, 0x0F	; 15
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_init+0x6>
 360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_init+0xc>
 362:	00 00       	nop
 364:	88 e2       	ldi	r24, 0x28	; 40
 366:	d2 df       	rcall	.-92     	; 0x30c <lcd_wr_command>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	d0 df       	rcall	.-96     	; 0x30c <lcd_wr_command>
 36c:	86 e0       	ldi	r24, 0x06	; 6
 36e:	ce df       	rcall	.-100    	; 0x30c <lcd_wr_command>
 370:	8e e0       	ldi	r24, 0x0E	; 14
 372:	cc df       	rcall	.-104    	; 0x30c <lcd_wr_command>
 374:	80 e8       	ldi	r24, 0x80	; 128
 376:	ca cf       	rjmp	.-108    	; 0x30c <lcd_wr_command>
 378:	08 95       	ret

0000037a <lcd_cursor>:
 *
 * Example Call: lcd_cursor(2, 3);
 */
void lcd_cursor (char row, char column)
{
	switch (row)
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	69 f0       	breq	.+26     	; 0x398 <lcd_cursor+0x1e>
 37e:	18 f4       	brcc	.+6      	; 0x386 <lcd_cursor+0xc>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	31 f0       	breq	.+12     	; 0x390 <lcd_cursor+0x16>
 384:	08 95       	ret
 386:	83 30       	cpi	r24, 0x03	; 3
 388:	59 f0       	breq	.+22     	; 0x3a0 <lcd_cursor+0x26>
 38a:	84 30       	cpi	r24, 0x04	; 4
 38c:	69 f0       	breq	.+26     	; 0x3a8 <lcd_cursor+0x2e>
 38e:	08 95       	ret
	{
		case 1: lcd_wr_command (0x80 + column - 1); break;
 390:	8f e7       	ldi	r24, 0x7F	; 127
 392:	86 0f       	add	r24, r22
 394:	bb cf       	rjmp	.-138    	; 0x30c <lcd_wr_command>
 396:	08 95       	ret
		case 2: lcd_wr_command (0xC0 + column - 1); break;
 398:	8f eb       	ldi	r24, 0xBF	; 191
 39a:	86 0f       	add	r24, r22
 39c:	b7 cf       	rjmp	.-146    	; 0x30c <lcd_wr_command>
 39e:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 3a0:	83 e9       	ldi	r24, 0x93	; 147
 3a2:	86 0f       	add	r24, r22
 3a4:	b3 cf       	rjmp	.-154    	; 0x30c <lcd_wr_command>
 3a6:	08 95       	ret
		case 4: lcd_wr_command (0xD4 + column - 1); break;
 3a8:	83 ed       	ldi	r24, 0xD3	; 211
 3aa:	86 0f       	add	r24, r22
 3ac:	af cf       	rjmp	.-162    	; 0x30c <lcd_wr_command>
 3ae:	08 95       	ret

000003b0 <lcd_clear>:
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 3b2:	ac cf       	rjmp	.-168    	; 0x30c <lcd_wr_command>
 3b4:	08 95       	ret

000003b6 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 3b6:	cf 93       	push	r28
 3b8:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 3ba:	df df       	rcall	.-66     	; 0x37a <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 3bc:	8b b1       	in	r24, 0x0b	; 11
 3be:	8f 70       	andi	r24, 0x0F	; 15
 3c0:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= temp;
 3c2:	8b b1       	in	r24, 0x0b	; 11
 3c4:	9c 2f       	mov	r25, r28
 3c6:	90 7f       	andi	r25, 0xF0	; 240
 3c8:	89 2b       	or	r24, r25
 3ca:	8b b9       	out	0x0b, r24	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 3cc:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 3ce:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 3d0:	29 9a       	sbi	0x05, 1	; 5
 3d2:	8f e1       	ldi	r24, 0x1F	; 31
 3d4:	9e e4       	ldi	r25, 0x4E	; 78
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_wr_char+0x20>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_wr_char+0x26>
 3dc:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 3de:	29 98       	cbi	0x05, 1	; 5
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 3e0:	8b b1       	in	r24, 0x0b	; 11
 3e2:	8f 70       	andi	r24, 0x0F	; 15
 3e4:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= alpha_num_char;
 3e6:	8b b1       	in	r24, 0x0b	; 11
 3e8:	c2 95       	swap	r28
 3ea:	c0 7f       	andi	r28, 0xF0	; 240
 3ec:	c8 2b       	or	r28, r24
 3ee:	cb b9       	out	0x0b, r28	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 3f0:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 3f2:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 3f4:	29 9a       	sbi	0x05, 1	; 5
 3f6:	8f e1       	ldi	r24, 0x1F	; 31
 3f8:	9e e4       	ldi	r25, 0x4E	; 78
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_wr_char+0x44>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 402:	29 98       	cbi	0x05, 1	; 5
}
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	d8 2f       	mov	r29, r24
 412:	c6 2f       	mov	r28, r22
 414:	fa 01       	movw	r30, r20
	while(*str != '\0')
 416:	40 81       	ld	r20, Z
 418:	44 23       	and	r20, r20
 41a:	61 f0       	breq	.+24     	; 0x434 <lcd_string+0x2c>
 41c:	8f 01       	movw	r16, r30
 41e:	0f 5f       	subi	r16, 0xFF	; 255
 420:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 422:	6c 2f       	mov	r22, r28
 424:	8d 2f       	mov	r24, r29
 426:	c7 df       	rcall	.-114    	; 0x3b6 <lcd_wr_char>
		str++;
		column+=1;
 428:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 42a:	f8 01       	movw	r30, r16
 42c:	41 91       	ld	r20, Z+
 42e:	8f 01       	movw	r16, r30
 430:	41 11       	cpse	r20, r1
 432:	f7 cf       	rjmp	.-18     	; 0x422 <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	08 95       	ret

0000043e <sprintf>:
 43e:	ae e0       	ldi	r26, 0x0E	; 14
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	e4 e2       	ldi	r30, 0x24	; 36
 444:	f2 e0       	ldi	r31, 0x02	; 2
 446:	aa c2       	rjmp	.+1364   	; 0x99c <__prologue_saves__+0x1c>
 448:	0d 89       	ldd	r16, Y+21	; 0x15
 44a:	1e 89       	ldd	r17, Y+22	; 0x16
 44c:	86 e0       	ldi	r24, 0x06	; 6
 44e:	8c 83       	std	Y+4, r24	; 0x04
 450:	1a 83       	std	Y+2, r17	; 0x02
 452:	09 83       	std	Y+1, r16	; 0x01
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	9f e7       	ldi	r25, 0x7F	; 127
 458:	9e 83       	std	Y+6, r25	; 0x06
 45a:	8d 83       	std	Y+5, r24	; 0x05
 45c:	ae 01       	movw	r20, r28
 45e:	47 5e       	subi	r20, 0xE7	; 231
 460:	5f 4f       	sbci	r21, 0xFF	; 255
 462:	6f 89       	ldd	r22, Y+23	; 0x17
 464:	78 8d       	ldd	r23, Y+24	; 0x18
 466:	ce 01       	movw	r24, r28
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	08 d0       	rcall	.+16     	; 0x47c <vfprintf>
 46c:	ef 81       	ldd	r30, Y+7	; 0x07
 46e:	f8 85       	ldd	r31, Y+8	; 0x08
 470:	e0 0f       	add	r30, r16
 472:	f1 1f       	adc	r31, r17
 474:	10 82       	st	Z, r1
 476:	2e 96       	adiw	r28, 0x0e	; 14
 478:	e4 e0       	ldi	r30, 0x04	; 4
 47a:	ac c2       	rjmp	.+1368   	; 0x9d4 <__epilogue_restores__+0x1c>

0000047c <vfprintf>:
 47c:	ab e0       	ldi	r26, 0x0B	; 11
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	e3 e4       	ldi	r30, 0x43	; 67
 482:	f2 e0       	ldi	r31, 0x02	; 2
 484:	7d c2       	rjmp	.+1274   	; 0x980 <__prologue_saves__>
 486:	6c 01       	movw	r12, r24
 488:	7b 01       	movw	r14, r22
 48a:	8a 01       	movw	r16, r20
 48c:	fc 01       	movw	r30, r24
 48e:	17 82       	std	Z+7, r1	; 0x07
 490:	16 82       	std	Z+6, r1	; 0x06
 492:	83 81       	ldd	r24, Z+3	; 0x03
 494:	81 ff       	sbrs	r24, 1
 496:	bf c1       	rjmp	.+894    	; 0x816 <vfprintf+0x39a>
 498:	ce 01       	movw	r24, r28
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	3c 01       	movw	r6, r24
 49e:	f6 01       	movw	r30, r12
 4a0:	93 81       	ldd	r25, Z+3	; 0x03
 4a2:	f7 01       	movw	r30, r14
 4a4:	93 fd       	sbrc	r25, 3
 4a6:	85 91       	lpm	r24, Z+
 4a8:	93 ff       	sbrs	r25, 3
 4aa:	81 91       	ld	r24, Z+
 4ac:	7f 01       	movw	r14, r30
 4ae:	88 23       	and	r24, r24
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <vfprintf+0x38>
 4b2:	ad c1       	rjmp	.+858    	; 0x80e <vfprintf+0x392>
 4b4:	85 32       	cpi	r24, 0x25	; 37
 4b6:	39 f4       	brne	.+14     	; 0x4c6 <vfprintf+0x4a>
 4b8:	93 fd       	sbrc	r25, 3
 4ba:	85 91       	lpm	r24, Z+
 4bc:	93 ff       	sbrs	r25, 3
 4be:	81 91       	ld	r24, Z+
 4c0:	7f 01       	movw	r14, r30
 4c2:	85 32       	cpi	r24, 0x25	; 37
 4c4:	21 f4       	brne	.+8      	; 0x4ce <vfprintf+0x52>
 4c6:	b6 01       	movw	r22, r12
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	c0 d1       	rcall	.+896    	; 0x84c <fputc>
 4cc:	e8 cf       	rjmp	.-48     	; 0x49e <vfprintf+0x22>
 4ce:	91 2c       	mov	r9, r1
 4d0:	21 2c       	mov	r2, r1
 4d2:	31 2c       	mov	r3, r1
 4d4:	ff e1       	ldi	r31, 0x1F	; 31
 4d6:	f3 15       	cp	r31, r3
 4d8:	d8 f0       	brcs	.+54     	; 0x510 <vfprintf+0x94>
 4da:	8b 32       	cpi	r24, 0x2B	; 43
 4dc:	79 f0       	breq	.+30     	; 0x4fc <vfprintf+0x80>
 4de:	38 f4       	brcc	.+14     	; 0x4ee <vfprintf+0x72>
 4e0:	80 32       	cpi	r24, 0x20	; 32
 4e2:	79 f0       	breq	.+30     	; 0x502 <vfprintf+0x86>
 4e4:	83 32       	cpi	r24, 0x23	; 35
 4e6:	a1 f4       	brne	.+40     	; 0x510 <vfprintf+0x94>
 4e8:	23 2d       	mov	r18, r3
 4ea:	20 61       	ori	r18, 0x10	; 16
 4ec:	1d c0       	rjmp	.+58     	; 0x528 <vfprintf+0xac>
 4ee:	8d 32       	cpi	r24, 0x2D	; 45
 4f0:	61 f0       	breq	.+24     	; 0x50a <vfprintf+0x8e>
 4f2:	80 33       	cpi	r24, 0x30	; 48
 4f4:	69 f4       	brne	.+26     	; 0x510 <vfprintf+0x94>
 4f6:	23 2d       	mov	r18, r3
 4f8:	21 60       	ori	r18, 0x01	; 1
 4fa:	16 c0       	rjmp	.+44     	; 0x528 <vfprintf+0xac>
 4fc:	83 2d       	mov	r24, r3
 4fe:	82 60       	ori	r24, 0x02	; 2
 500:	38 2e       	mov	r3, r24
 502:	e3 2d       	mov	r30, r3
 504:	e4 60       	ori	r30, 0x04	; 4
 506:	3e 2e       	mov	r3, r30
 508:	2a c0       	rjmp	.+84     	; 0x55e <vfprintf+0xe2>
 50a:	f3 2d       	mov	r31, r3
 50c:	f8 60       	ori	r31, 0x08	; 8
 50e:	1d c0       	rjmp	.+58     	; 0x54a <vfprintf+0xce>
 510:	37 fc       	sbrc	r3, 7
 512:	2d c0       	rjmp	.+90     	; 0x56e <vfprintf+0xf2>
 514:	20 ed       	ldi	r18, 0xD0	; 208
 516:	28 0f       	add	r18, r24
 518:	2a 30       	cpi	r18, 0x0A	; 10
 51a:	40 f0       	brcs	.+16     	; 0x52c <vfprintf+0xb0>
 51c:	8e 32       	cpi	r24, 0x2E	; 46
 51e:	b9 f4       	brne	.+46     	; 0x54e <vfprintf+0xd2>
 520:	36 fc       	sbrc	r3, 6
 522:	75 c1       	rjmp	.+746    	; 0x80e <vfprintf+0x392>
 524:	23 2d       	mov	r18, r3
 526:	20 64       	ori	r18, 0x40	; 64
 528:	32 2e       	mov	r3, r18
 52a:	19 c0       	rjmp	.+50     	; 0x55e <vfprintf+0xe2>
 52c:	36 fe       	sbrs	r3, 6
 52e:	06 c0       	rjmp	.+12     	; 0x53c <vfprintf+0xc0>
 530:	8a e0       	ldi	r24, 0x0A	; 10
 532:	98 9e       	mul	r9, r24
 534:	20 0d       	add	r18, r0
 536:	11 24       	eor	r1, r1
 538:	92 2e       	mov	r9, r18
 53a:	11 c0       	rjmp	.+34     	; 0x55e <vfprintf+0xe2>
 53c:	ea e0       	ldi	r30, 0x0A	; 10
 53e:	2e 9e       	mul	r2, r30
 540:	20 0d       	add	r18, r0
 542:	11 24       	eor	r1, r1
 544:	22 2e       	mov	r2, r18
 546:	f3 2d       	mov	r31, r3
 548:	f0 62       	ori	r31, 0x20	; 32
 54a:	3f 2e       	mov	r3, r31
 54c:	08 c0       	rjmp	.+16     	; 0x55e <vfprintf+0xe2>
 54e:	8c 36       	cpi	r24, 0x6C	; 108
 550:	21 f4       	brne	.+8      	; 0x55a <vfprintf+0xde>
 552:	83 2d       	mov	r24, r3
 554:	80 68       	ori	r24, 0x80	; 128
 556:	38 2e       	mov	r3, r24
 558:	02 c0       	rjmp	.+4      	; 0x55e <vfprintf+0xe2>
 55a:	88 36       	cpi	r24, 0x68	; 104
 55c:	41 f4       	brne	.+16     	; 0x56e <vfprintf+0xf2>
 55e:	f7 01       	movw	r30, r14
 560:	93 fd       	sbrc	r25, 3
 562:	85 91       	lpm	r24, Z+
 564:	93 ff       	sbrs	r25, 3
 566:	81 91       	ld	r24, Z+
 568:	7f 01       	movw	r14, r30
 56a:	81 11       	cpse	r24, r1
 56c:	b3 cf       	rjmp	.-154    	; 0x4d4 <vfprintf+0x58>
 56e:	98 2f       	mov	r25, r24
 570:	9f 7d       	andi	r25, 0xDF	; 223
 572:	95 54       	subi	r25, 0x45	; 69
 574:	93 30       	cpi	r25, 0x03	; 3
 576:	28 f4       	brcc	.+10     	; 0x582 <vfprintf+0x106>
 578:	0c 5f       	subi	r16, 0xFC	; 252
 57a:	1f 4f       	sbci	r17, 0xFF	; 255
 57c:	9f e3       	ldi	r25, 0x3F	; 63
 57e:	99 83       	std	Y+1, r25	; 0x01
 580:	0d c0       	rjmp	.+26     	; 0x59c <vfprintf+0x120>
 582:	83 36       	cpi	r24, 0x63	; 99
 584:	31 f0       	breq	.+12     	; 0x592 <vfprintf+0x116>
 586:	83 37       	cpi	r24, 0x73	; 115
 588:	71 f0       	breq	.+28     	; 0x5a6 <vfprintf+0x12a>
 58a:	83 35       	cpi	r24, 0x53	; 83
 58c:	09 f0       	breq	.+2      	; 0x590 <vfprintf+0x114>
 58e:	55 c0       	rjmp	.+170    	; 0x63a <vfprintf+0x1be>
 590:	20 c0       	rjmp	.+64     	; 0x5d2 <vfprintf+0x156>
 592:	f8 01       	movw	r30, r16
 594:	80 81       	ld	r24, Z
 596:	89 83       	std	Y+1, r24	; 0x01
 598:	0e 5f       	subi	r16, 0xFE	; 254
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	88 24       	eor	r8, r8
 59e:	83 94       	inc	r8
 5a0:	91 2c       	mov	r9, r1
 5a2:	53 01       	movw	r10, r6
 5a4:	12 c0       	rjmp	.+36     	; 0x5ca <vfprintf+0x14e>
 5a6:	28 01       	movw	r4, r16
 5a8:	f2 e0       	ldi	r31, 0x02	; 2
 5aa:	4f 0e       	add	r4, r31
 5ac:	51 1c       	adc	r5, r1
 5ae:	f8 01       	movw	r30, r16
 5b0:	a0 80       	ld	r10, Z
 5b2:	b1 80       	ldd	r11, Z+1	; 0x01
 5b4:	36 fe       	sbrs	r3, 6
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <vfprintf+0x142>
 5b8:	69 2d       	mov	r22, r9
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <vfprintf+0x146>
 5be:	6f ef       	ldi	r22, 0xFF	; 255
 5c0:	7f ef       	ldi	r23, 0xFF	; 255
 5c2:	c5 01       	movw	r24, r10
 5c4:	38 d1       	rcall	.+624    	; 0x836 <strnlen>
 5c6:	4c 01       	movw	r8, r24
 5c8:	82 01       	movw	r16, r4
 5ca:	f3 2d       	mov	r31, r3
 5cc:	ff 77       	andi	r31, 0x7F	; 127
 5ce:	3f 2e       	mov	r3, r31
 5d0:	15 c0       	rjmp	.+42     	; 0x5fc <vfprintf+0x180>
 5d2:	28 01       	movw	r4, r16
 5d4:	22 e0       	ldi	r18, 0x02	; 2
 5d6:	42 0e       	add	r4, r18
 5d8:	51 1c       	adc	r5, r1
 5da:	f8 01       	movw	r30, r16
 5dc:	a0 80       	ld	r10, Z
 5de:	b1 80       	ldd	r11, Z+1	; 0x01
 5e0:	36 fe       	sbrs	r3, 6
 5e2:	03 c0       	rjmp	.+6      	; 0x5ea <vfprintf+0x16e>
 5e4:	69 2d       	mov	r22, r9
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <vfprintf+0x172>
 5ea:	6f ef       	ldi	r22, 0xFF	; 255
 5ec:	7f ef       	ldi	r23, 0xFF	; 255
 5ee:	c5 01       	movw	r24, r10
 5f0:	17 d1       	rcall	.+558    	; 0x820 <strnlen_P>
 5f2:	4c 01       	movw	r8, r24
 5f4:	f3 2d       	mov	r31, r3
 5f6:	f0 68       	ori	r31, 0x80	; 128
 5f8:	3f 2e       	mov	r3, r31
 5fa:	82 01       	movw	r16, r4
 5fc:	33 fc       	sbrc	r3, 3
 5fe:	19 c0       	rjmp	.+50     	; 0x632 <vfprintf+0x1b6>
 600:	82 2d       	mov	r24, r2
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	88 16       	cp	r8, r24
 606:	99 06       	cpc	r9, r25
 608:	a0 f4       	brcc	.+40     	; 0x632 <vfprintf+0x1b6>
 60a:	b6 01       	movw	r22, r12
 60c:	80 e2       	ldi	r24, 0x20	; 32
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	1d d1       	rcall	.+570    	; 0x84c <fputc>
 612:	2a 94       	dec	r2
 614:	f5 cf       	rjmp	.-22     	; 0x600 <vfprintf+0x184>
 616:	f5 01       	movw	r30, r10
 618:	37 fc       	sbrc	r3, 7
 61a:	85 91       	lpm	r24, Z+
 61c:	37 fe       	sbrs	r3, 7
 61e:	81 91       	ld	r24, Z+
 620:	5f 01       	movw	r10, r30
 622:	b6 01       	movw	r22, r12
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	12 d1       	rcall	.+548    	; 0x84c <fputc>
 628:	21 10       	cpse	r2, r1
 62a:	2a 94       	dec	r2
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	82 1a       	sub	r8, r18
 630:	91 08       	sbc	r9, r1
 632:	81 14       	cp	r8, r1
 634:	91 04       	cpc	r9, r1
 636:	79 f7       	brne	.-34     	; 0x616 <vfprintf+0x19a>
 638:	e1 c0       	rjmp	.+450    	; 0x7fc <vfprintf+0x380>
 63a:	84 36       	cpi	r24, 0x64	; 100
 63c:	11 f0       	breq	.+4      	; 0x642 <vfprintf+0x1c6>
 63e:	89 36       	cpi	r24, 0x69	; 105
 640:	39 f5       	brne	.+78     	; 0x690 <vfprintf+0x214>
 642:	f8 01       	movw	r30, r16
 644:	37 fe       	sbrs	r3, 7
 646:	07 c0       	rjmp	.+14     	; 0x656 <vfprintf+0x1da>
 648:	60 81       	ld	r22, Z
 64a:	71 81       	ldd	r23, Z+1	; 0x01
 64c:	82 81       	ldd	r24, Z+2	; 0x02
 64e:	93 81       	ldd	r25, Z+3	; 0x03
 650:	0c 5f       	subi	r16, 0xFC	; 252
 652:	1f 4f       	sbci	r17, 0xFF	; 255
 654:	08 c0       	rjmp	.+16     	; 0x666 <vfprintf+0x1ea>
 656:	60 81       	ld	r22, Z
 658:	71 81       	ldd	r23, Z+1	; 0x01
 65a:	07 2e       	mov	r0, r23
 65c:	00 0c       	add	r0, r0
 65e:	88 0b       	sbc	r24, r24
 660:	99 0b       	sbc	r25, r25
 662:	0e 5f       	subi	r16, 0xFE	; 254
 664:	1f 4f       	sbci	r17, 0xFF	; 255
 666:	f3 2d       	mov	r31, r3
 668:	ff 76       	andi	r31, 0x6F	; 111
 66a:	3f 2e       	mov	r3, r31
 66c:	97 ff       	sbrs	r25, 7
 66e:	09 c0       	rjmp	.+18     	; 0x682 <vfprintf+0x206>
 670:	90 95       	com	r25
 672:	80 95       	com	r24
 674:	70 95       	com	r23
 676:	61 95       	neg	r22
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	8f 4f       	sbci	r24, 0xFF	; 255
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	f0 68       	ori	r31, 0x80	; 128
 680:	3f 2e       	mov	r3, r31
 682:	2a e0       	ldi	r18, 0x0A	; 10
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	a3 01       	movw	r20, r6
 688:	1d d1       	rcall	.+570    	; 0x8c4 <__ultoa_invert>
 68a:	88 2e       	mov	r8, r24
 68c:	86 18       	sub	r8, r6
 68e:	44 c0       	rjmp	.+136    	; 0x718 <vfprintf+0x29c>
 690:	85 37       	cpi	r24, 0x75	; 117
 692:	31 f4       	brne	.+12     	; 0x6a0 <vfprintf+0x224>
 694:	23 2d       	mov	r18, r3
 696:	2f 7e       	andi	r18, 0xEF	; 239
 698:	b2 2e       	mov	r11, r18
 69a:	2a e0       	ldi	r18, 0x0A	; 10
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	25 c0       	rjmp	.+74     	; 0x6ea <vfprintf+0x26e>
 6a0:	93 2d       	mov	r25, r3
 6a2:	99 7f       	andi	r25, 0xF9	; 249
 6a4:	b9 2e       	mov	r11, r25
 6a6:	8f 36       	cpi	r24, 0x6F	; 111
 6a8:	c1 f0       	breq	.+48     	; 0x6da <vfprintf+0x25e>
 6aa:	18 f4       	brcc	.+6      	; 0x6b2 <vfprintf+0x236>
 6ac:	88 35       	cpi	r24, 0x58	; 88
 6ae:	79 f0       	breq	.+30     	; 0x6ce <vfprintf+0x252>
 6b0:	ae c0       	rjmp	.+348    	; 0x80e <vfprintf+0x392>
 6b2:	80 37       	cpi	r24, 0x70	; 112
 6b4:	19 f0       	breq	.+6      	; 0x6bc <vfprintf+0x240>
 6b6:	88 37       	cpi	r24, 0x78	; 120
 6b8:	21 f0       	breq	.+8      	; 0x6c2 <vfprintf+0x246>
 6ba:	a9 c0       	rjmp	.+338    	; 0x80e <vfprintf+0x392>
 6bc:	e9 2f       	mov	r30, r25
 6be:	e0 61       	ori	r30, 0x10	; 16
 6c0:	be 2e       	mov	r11, r30
 6c2:	b4 fe       	sbrs	r11, 4
 6c4:	0d c0       	rjmp	.+26     	; 0x6e0 <vfprintf+0x264>
 6c6:	fb 2d       	mov	r31, r11
 6c8:	f4 60       	ori	r31, 0x04	; 4
 6ca:	bf 2e       	mov	r11, r31
 6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <vfprintf+0x264>
 6ce:	34 fe       	sbrs	r3, 4
 6d0:	0a c0       	rjmp	.+20     	; 0x6e6 <vfprintf+0x26a>
 6d2:	29 2f       	mov	r18, r25
 6d4:	26 60       	ori	r18, 0x06	; 6
 6d6:	b2 2e       	mov	r11, r18
 6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <vfprintf+0x26a>
 6da:	28 e0       	ldi	r18, 0x08	; 8
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	05 c0       	rjmp	.+10     	; 0x6ea <vfprintf+0x26e>
 6e0:	20 e1       	ldi	r18, 0x10	; 16
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <vfprintf+0x26e>
 6e6:	20 e1       	ldi	r18, 0x10	; 16
 6e8:	32 e0       	ldi	r19, 0x02	; 2
 6ea:	f8 01       	movw	r30, r16
 6ec:	b7 fe       	sbrs	r11, 7
 6ee:	07 c0       	rjmp	.+14     	; 0x6fe <vfprintf+0x282>
 6f0:	60 81       	ld	r22, Z
 6f2:	71 81       	ldd	r23, Z+1	; 0x01
 6f4:	82 81       	ldd	r24, Z+2	; 0x02
 6f6:	93 81       	ldd	r25, Z+3	; 0x03
 6f8:	0c 5f       	subi	r16, 0xFC	; 252
 6fa:	1f 4f       	sbci	r17, 0xFF	; 255
 6fc:	06 c0       	rjmp	.+12     	; 0x70a <vfprintf+0x28e>
 6fe:	60 81       	ld	r22, Z
 700:	71 81       	ldd	r23, Z+1	; 0x01
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 5f       	subi	r16, 0xFE	; 254
 708:	1f 4f       	sbci	r17, 0xFF	; 255
 70a:	a3 01       	movw	r20, r6
 70c:	db d0       	rcall	.+438    	; 0x8c4 <__ultoa_invert>
 70e:	88 2e       	mov	r8, r24
 710:	86 18       	sub	r8, r6
 712:	fb 2d       	mov	r31, r11
 714:	ff 77       	andi	r31, 0x7F	; 127
 716:	3f 2e       	mov	r3, r31
 718:	36 fe       	sbrs	r3, 6
 71a:	0d c0       	rjmp	.+26     	; 0x736 <vfprintf+0x2ba>
 71c:	23 2d       	mov	r18, r3
 71e:	2e 7f       	andi	r18, 0xFE	; 254
 720:	a2 2e       	mov	r10, r18
 722:	89 14       	cp	r8, r9
 724:	58 f4       	brcc	.+22     	; 0x73c <vfprintf+0x2c0>
 726:	34 fe       	sbrs	r3, 4
 728:	0b c0       	rjmp	.+22     	; 0x740 <vfprintf+0x2c4>
 72a:	32 fc       	sbrc	r3, 2
 72c:	09 c0       	rjmp	.+18     	; 0x740 <vfprintf+0x2c4>
 72e:	83 2d       	mov	r24, r3
 730:	8e 7e       	andi	r24, 0xEE	; 238
 732:	a8 2e       	mov	r10, r24
 734:	05 c0       	rjmp	.+10     	; 0x740 <vfprintf+0x2c4>
 736:	b8 2c       	mov	r11, r8
 738:	a3 2c       	mov	r10, r3
 73a:	03 c0       	rjmp	.+6      	; 0x742 <vfprintf+0x2c6>
 73c:	b8 2c       	mov	r11, r8
 73e:	01 c0       	rjmp	.+2      	; 0x742 <vfprintf+0x2c6>
 740:	b9 2c       	mov	r11, r9
 742:	a4 fe       	sbrs	r10, 4
 744:	0f c0       	rjmp	.+30     	; 0x764 <vfprintf+0x2e8>
 746:	fe 01       	movw	r30, r28
 748:	e8 0d       	add	r30, r8
 74a:	f1 1d       	adc	r31, r1
 74c:	80 81       	ld	r24, Z
 74e:	80 33       	cpi	r24, 0x30	; 48
 750:	21 f4       	brne	.+8      	; 0x75a <vfprintf+0x2de>
 752:	9a 2d       	mov	r25, r10
 754:	99 7e       	andi	r25, 0xE9	; 233
 756:	a9 2e       	mov	r10, r25
 758:	09 c0       	rjmp	.+18     	; 0x76c <vfprintf+0x2f0>
 75a:	a2 fe       	sbrs	r10, 2
 75c:	06 c0       	rjmp	.+12     	; 0x76a <vfprintf+0x2ee>
 75e:	b3 94       	inc	r11
 760:	b3 94       	inc	r11
 762:	04 c0       	rjmp	.+8      	; 0x76c <vfprintf+0x2f0>
 764:	8a 2d       	mov	r24, r10
 766:	86 78       	andi	r24, 0x86	; 134
 768:	09 f0       	breq	.+2      	; 0x76c <vfprintf+0x2f0>
 76a:	b3 94       	inc	r11
 76c:	a3 fc       	sbrc	r10, 3
 76e:	10 c0       	rjmp	.+32     	; 0x790 <vfprintf+0x314>
 770:	a0 fe       	sbrs	r10, 0
 772:	06 c0       	rjmp	.+12     	; 0x780 <vfprintf+0x304>
 774:	b2 14       	cp	r11, r2
 776:	80 f4       	brcc	.+32     	; 0x798 <vfprintf+0x31c>
 778:	28 0c       	add	r2, r8
 77a:	92 2c       	mov	r9, r2
 77c:	9b 18       	sub	r9, r11
 77e:	0d c0       	rjmp	.+26     	; 0x79a <vfprintf+0x31e>
 780:	b2 14       	cp	r11, r2
 782:	58 f4       	brcc	.+22     	; 0x79a <vfprintf+0x31e>
 784:	b6 01       	movw	r22, r12
 786:	80 e2       	ldi	r24, 0x20	; 32
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	60 d0       	rcall	.+192    	; 0x84c <fputc>
 78c:	b3 94       	inc	r11
 78e:	f8 cf       	rjmp	.-16     	; 0x780 <vfprintf+0x304>
 790:	b2 14       	cp	r11, r2
 792:	18 f4       	brcc	.+6      	; 0x79a <vfprintf+0x31e>
 794:	2b 18       	sub	r2, r11
 796:	02 c0       	rjmp	.+4      	; 0x79c <vfprintf+0x320>
 798:	98 2c       	mov	r9, r8
 79a:	21 2c       	mov	r2, r1
 79c:	a4 fe       	sbrs	r10, 4
 79e:	0f c0       	rjmp	.+30     	; 0x7be <vfprintf+0x342>
 7a0:	b6 01       	movw	r22, r12
 7a2:	80 e3       	ldi	r24, 0x30	; 48
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	52 d0       	rcall	.+164    	; 0x84c <fputc>
 7a8:	a2 fe       	sbrs	r10, 2
 7aa:	16 c0       	rjmp	.+44     	; 0x7d8 <vfprintf+0x35c>
 7ac:	a1 fc       	sbrc	r10, 1
 7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <vfprintf+0x33a>
 7b0:	88 e7       	ldi	r24, 0x78	; 120
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <vfprintf+0x33e>
 7b6:	88 e5       	ldi	r24, 0x58	; 88
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	b6 01       	movw	r22, r12
 7bc:	0c c0       	rjmp	.+24     	; 0x7d6 <vfprintf+0x35a>
 7be:	8a 2d       	mov	r24, r10
 7c0:	86 78       	andi	r24, 0x86	; 134
 7c2:	51 f0       	breq	.+20     	; 0x7d8 <vfprintf+0x35c>
 7c4:	a1 fe       	sbrs	r10, 1
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <vfprintf+0x350>
 7c8:	8b e2       	ldi	r24, 0x2B	; 43
 7ca:	01 c0       	rjmp	.+2      	; 0x7ce <vfprintf+0x352>
 7cc:	80 e2       	ldi	r24, 0x20	; 32
 7ce:	a7 fc       	sbrc	r10, 7
 7d0:	8d e2       	ldi	r24, 0x2D	; 45
 7d2:	b6 01       	movw	r22, r12
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	3a d0       	rcall	.+116    	; 0x84c <fputc>
 7d8:	89 14       	cp	r8, r9
 7da:	30 f4       	brcc	.+12     	; 0x7e8 <vfprintf+0x36c>
 7dc:	b6 01       	movw	r22, r12
 7de:	80 e3       	ldi	r24, 0x30	; 48
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	34 d0       	rcall	.+104    	; 0x84c <fputc>
 7e4:	9a 94       	dec	r9
 7e6:	f8 cf       	rjmp	.-16     	; 0x7d8 <vfprintf+0x35c>
 7e8:	8a 94       	dec	r8
 7ea:	f3 01       	movw	r30, r6
 7ec:	e8 0d       	add	r30, r8
 7ee:	f1 1d       	adc	r31, r1
 7f0:	80 81       	ld	r24, Z
 7f2:	b6 01       	movw	r22, r12
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	2a d0       	rcall	.+84     	; 0x84c <fputc>
 7f8:	81 10       	cpse	r8, r1
 7fa:	f6 cf       	rjmp	.-20     	; 0x7e8 <vfprintf+0x36c>
 7fc:	22 20       	and	r2, r2
 7fe:	09 f4       	brne	.+2      	; 0x802 <vfprintf+0x386>
 800:	4e ce       	rjmp	.-868    	; 0x49e <vfprintf+0x22>
 802:	b6 01       	movw	r22, r12
 804:	80 e2       	ldi	r24, 0x20	; 32
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	21 d0       	rcall	.+66     	; 0x84c <fputc>
 80a:	2a 94       	dec	r2
 80c:	f7 cf       	rjmp	.-18     	; 0x7fc <vfprintf+0x380>
 80e:	f6 01       	movw	r30, r12
 810:	86 81       	ldd	r24, Z+6	; 0x06
 812:	97 81       	ldd	r25, Z+7	; 0x07
 814:	02 c0       	rjmp	.+4      	; 0x81a <vfprintf+0x39e>
 816:	8f ef       	ldi	r24, 0xFF	; 255
 818:	9f ef       	ldi	r25, 0xFF	; 255
 81a:	2b 96       	adiw	r28, 0x0b	; 11
 81c:	e2 e1       	ldi	r30, 0x12	; 18
 81e:	cc c0       	rjmp	.+408    	; 0x9b8 <__epilogue_restores__>

00000820 <strnlen_P>:
 820:	fc 01       	movw	r30, r24
 822:	05 90       	lpm	r0, Z+
 824:	61 50       	subi	r22, 0x01	; 1
 826:	70 40       	sbci	r23, 0x00	; 0
 828:	01 10       	cpse	r0, r1
 82a:	d8 f7       	brcc	.-10     	; 0x822 <strnlen_P+0x2>
 82c:	80 95       	com	r24
 82e:	90 95       	com	r25
 830:	8e 0f       	add	r24, r30
 832:	9f 1f       	adc	r25, r31
 834:	08 95       	ret

00000836 <strnlen>:
 836:	fc 01       	movw	r30, r24
 838:	61 50       	subi	r22, 0x01	; 1
 83a:	70 40       	sbci	r23, 0x00	; 0
 83c:	01 90       	ld	r0, Z+
 83e:	01 10       	cpse	r0, r1
 840:	d8 f7       	brcc	.-10     	; 0x838 <strnlen+0x2>
 842:	80 95       	com	r24
 844:	90 95       	com	r25
 846:	8e 0f       	add	r24, r30
 848:	9f 1f       	adc	r25, r31
 84a:	08 95       	ret

0000084c <fputc>:
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	fb 01       	movw	r30, r22
 856:	23 81       	ldd	r18, Z+3	; 0x03
 858:	21 fd       	sbrc	r18, 1
 85a:	03 c0       	rjmp	.+6      	; 0x862 <fputc+0x16>
 85c:	8f ef       	ldi	r24, 0xFF	; 255
 85e:	9f ef       	ldi	r25, 0xFF	; 255
 860:	2c c0       	rjmp	.+88     	; 0x8ba <fputc+0x6e>
 862:	22 ff       	sbrs	r18, 2
 864:	16 c0       	rjmp	.+44     	; 0x892 <fputc+0x46>
 866:	46 81       	ldd	r20, Z+6	; 0x06
 868:	57 81       	ldd	r21, Z+7	; 0x07
 86a:	24 81       	ldd	r18, Z+4	; 0x04
 86c:	35 81       	ldd	r19, Z+5	; 0x05
 86e:	42 17       	cp	r20, r18
 870:	53 07       	cpc	r21, r19
 872:	44 f4       	brge	.+16     	; 0x884 <fputc+0x38>
 874:	a0 81       	ld	r26, Z
 876:	b1 81       	ldd	r27, Z+1	; 0x01
 878:	9d 01       	movw	r18, r26
 87a:	2f 5f       	subi	r18, 0xFF	; 255
 87c:	3f 4f       	sbci	r19, 0xFF	; 255
 87e:	31 83       	std	Z+1, r19	; 0x01
 880:	20 83       	st	Z, r18
 882:	8c 93       	st	X, r24
 884:	26 81       	ldd	r18, Z+6	; 0x06
 886:	37 81       	ldd	r19, Z+7	; 0x07
 888:	2f 5f       	subi	r18, 0xFF	; 255
 88a:	3f 4f       	sbci	r19, 0xFF	; 255
 88c:	37 83       	std	Z+7, r19	; 0x07
 88e:	26 83       	std	Z+6, r18	; 0x06
 890:	14 c0       	rjmp	.+40     	; 0x8ba <fputc+0x6e>
 892:	8b 01       	movw	r16, r22
 894:	ec 01       	movw	r28, r24
 896:	fb 01       	movw	r30, r22
 898:	00 84       	ldd	r0, Z+8	; 0x08
 89a:	f1 85       	ldd	r31, Z+9	; 0x09
 89c:	e0 2d       	mov	r30, r0
 89e:	09 95       	icall
 8a0:	89 2b       	or	r24, r25
 8a2:	e1 f6       	brne	.-72     	; 0x85c <fputc+0x10>
 8a4:	d8 01       	movw	r26, r16
 8a6:	16 96       	adiw	r26, 0x06	; 6
 8a8:	8d 91       	ld	r24, X+
 8aa:	9c 91       	ld	r25, X
 8ac:	17 97       	sbiw	r26, 0x07	; 7
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	17 96       	adiw	r26, 0x07	; 7
 8b2:	9c 93       	st	X, r25
 8b4:	8e 93       	st	-X, r24
 8b6:	16 97       	sbiw	r26, 0x06	; 6
 8b8:	ce 01       	movw	r24, r28
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	1f 91       	pop	r17
 8c0:	0f 91       	pop	r16
 8c2:	08 95       	ret

000008c4 <__ultoa_invert>:
 8c4:	fa 01       	movw	r30, r20
 8c6:	aa 27       	eor	r26, r26
 8c8:	28 30       	cpi	r18, 0x08	; 8
 8ca:	51 f1       	breq	.+84     	; 0x920 <__stack+0x21>
 8cc:	20 31       	cpi	r18, 0x10	; 16
 8ce:	81 f1       	breq	.+96     	; 0x930 <__stack+0x31>
 8d0:	e8 94       	clt
 8d2:	6f 93       	push	r22
 8d4:	6e 7f       	andi	r22, 0xFE	; 254
 8d6:	6e 5f       	subi	r22, 0xFE	; 254
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	af 4f       	sbci	r26, 0xFF	; 255
 8e0:	b1 e0       	ldi	r27, 0x01	; 1
 8e2:	3e d0       	rcall	.+124    	; 0x960 <__stack+0x61>
 8e4:	b4 e0       	ldi	r27, 0x04	; 4
 8e6:	3c d0       	rcall	.+120    	; 0x960 <__stack+0x61>
 8e8:	67 0f       	add	r22, r23
 8ea:	78 1f       	adc	r23, r24
 8ec:	89 1f       	adc	r24, r25
 8ee:	9a 1f       	adc	r25, r26
 8f0:	a1 1d       	adc	r26, r1
 8f2:	68 0f       	add	r22, r24
 8f4:	79 1f       	adc	r23, r25
 8f6:	8a 1f       	adc	r24, r26
 8f8:	91 1d       	adc	r25, r1
 8fa:	a1 1d       	adc	r26, r1
 8fc:	6a 0f       	add	r22, r26
 8fe:	71 1d       	adc	r23, r1
 900:	81 1d       	adc	r24, r1
 902:	91 1d       	adc	r25, r1
 904:	a1 1d       	adc	r26, r1
 906:	20 d0       	rcall	.+64     	; 0x948 <__stack+0x49>
 908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xd>
 90a:	68 94       	set
 90c:	3f 91       	pop	r19
 90e:	2a e0       	ldi	r18, 0x0A	; 10
 910:	26 9f       	mul	r18, r22
 912:	11 24       	eor	r1, r1
 914:	30 19       	sub	r19, r0
 916:	30 5d       	subi	r19, 0xD0	; 208
 918:	31 93       	st	Z+, r19
 91a:	de f6       	brtc	.-74     	; 0x8d2 <__ultoa_invert+0xe>
 91c:	cf 01       	movw	r24, r30
 91e:	08 95       	ret
 920:	46 2f       	mov	r20, r22
 922:	47 70       	andi	r20, 0x07	; 7
 924:	40 5d       	subi	r20, 0xD0	; 208
 926:	41 93       	st	Z+, r20
 928:	b3 e0       	ldi	r27, 0x03	; 3
 92a:	0f d0       	rcall	.+30     	; 0x94a <__stack+0x4b>
 92c:	c9 f7       	brne	.-14     	; 0x920 <__stack+0x21>
 92e:	f6 cf       	rjmp	.-20     	; 0x91c <__stack+0x1d>
 930:	46 2f       	mov	r20, r22
 932:	4f 70       	andi	r20, 0x0F	; 15
 934:	40 5d       	subi	r20, 0xD0	; 208
 936:	4a 33       	cpi	r20, 0x3A	; 58
 938:	18 f0       	brcs	.+6      	; 0x940 <__stack+0x41>
 93a:	49 5d       	subi	r20, 0xD9	; 217
 93c:	31 fd       	sbrc	r19, 1
 93e:	40 52       	subi	r20, 0x20	; 32
 940:	41 93       	st	Z+, r20
 942:	02 d0       	rcall	.+4      	; 0x948 <__stack+0x49>
 944:	a9 f7       	brne	.-22     	; 0x930 <__stack+0x31>
 946:	ea cf       	rjmp	.-44     	; 0x91c <__stack+0x1d>
 948:	b4 e0       	ldi	r27, 0x04	; 4
 94a:	a6 95       	lsr	r26
 94c:	97 95       	ror	r25
 94e:	87 95       	ror	r24
 950:	77 95       	ror	r23
 952:	67 95       	ror	r22
 954:	ba 95       	dec	r27
 956:	c9 f7       	brne	.-14     	; 0x94a <__stack+0x4b>
 958:	00 97       	sbiw	r24, 0x00	; 0
 95a:	61 05       	cpc	r22, r1
 95c:	71 05       	cpc	r23, r1
 95e:	08 95       	ret
 960:	9b 01       	movw	r18, r22
 962:	ac 01       	movw	r20, r24
 964:	0a 2e       	mov	r0, r26
 966:	06 94       	lsr	r0
 968:	57 95       	ror	r21
 96a:	47 95       	ror	r20
 96c:	37 95       	ror	r19
 96e:	27 95       	ror	r18
 970:	ba 95       	dec	r27
 972:	c9 f7       	brne	.-14     	; 0x966 <__stack+0x67>
 974:	62 0f       	add	r22, r18
 976:	73 1f       	adc	r23, r19
 978:	84 1f       	adc	r24, r20
 97a:	95 1f       	adc	r25, r21
 97c:	a0 1d       	adc	r26, r0
 97e:	08 95       	ret

00000980 <__prologue_saves__>:
 980:	2f 92       	push	r2
 982:	3f 92       	push	r3
 984:	4f 92       	push	r4
 986:	5f 92       	push	r5
 988:	6f 92       	push	r6
 98a:	7f 92       	push	r7
 98c:	8f 92       	push	r8
 98e:	9f 92       	push	r9
 990:	af 92       	push	r10
 992:	bf 92       	push	r11
 994:	cf 92       	push	r12
 996:	df 92       	push	r13
 998:	ef 92       	push	r14
 99a:	ff 92       	push	r15
 99c:	0f 93       	push	r16
 99e:	1f 93       	push	r17
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	cd b7       	in	r28, 0x3d	; 61
 9a6:	de b7       	in	r29, 0x3e	; 62
 9a8:	ca 1b       	sub	r28, r26
 9aa:	db 0b       	sbc	r29, r27
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	f8 94       	cli
 9b0:	de bf       	out	0x3e, r29	; 62
 9b2:	0f be       	out	0x3f, r0	; 63
 9b4:	cd bf       	out	0x3d, r28	; 61
 9b6:	09 94       	ijmp

000009b8 <__epilogue_restores__>:
 9b8:	2a 88       	ldd	r2, Y+18	; 0x12
 9ba:	39 88       	ldd	r3, Y+17	; 0x11
 9bc:	48 88       	ldd	r4, Y+16	; 0x10
 9be:	5f 84       	ldd	r5, Y+15	; 0x0f
 9c0:	6e 84       	ldd	r6, Y+14	; 0x0e
 9c2:	7d 84       	ldd	r7, Y+13	; 0x0d
 9c4:	8c 84       	ldd	r8, Y+12	; 0x0c
 9c6:	9b 84       	ldd	r9, Y+11	; 0x0b
 9c8:	aa 84       	ldd	r10, Y+10	; 0x0a
 9ca:	b9 84       	ldd	r11, Y+9	; 0x09
 9cc:	c8 84       	ldd	r12, Y+8	; 0x08
 9ce:	df 80       	ldd	r13, Y+7	; 0x07
 9d0:	ee 80       	ldd	r14, Y+6	; 0x06
 9d2:	fd 80       	ldd	r15, Y+5	; 0x05
 9d4:	0c 81       	ldd	r16, Y+4	; 0x04
 9d6:	1b 81       	ldd	r17, Y+3	; 0x03
 9d8:	aa 81       	ldd	r26, Y+2	; 0x02
 9da:	b9 81       	ldd	r27, Y+1	; 0x01
 9dc:	ce 0f       	add	r28, r30
 9de:	d1 1d       	adc	r29, r1
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	f8 94       	cli
 9e4:	de bf       	out	0x3e, r29	; 62
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	cd bf       	out	0x3d, r28	; 61
 9ea:	ed 01       	movw	r28, r26
 9ec:	08 95       	ret

000009ee <_exit>:
 9ee:	f8 94       	cli

000009f0 <__stop_program>:
 9f0:	ff cf       	rjmp	.-2      	; 0x9f0 <__stop_program>
